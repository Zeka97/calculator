{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","event","state","rezultat","znak","setState","input","target","value","manipulateChange","broj1","reset","izracunajVrijednost","Number","bind","className","this","onClick","e","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7ae4896.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor()\n    {\n      super();\n    \n    this.state = {\n      input:'',\n      znak:'',\n      broj1:'',\n      rezultat:''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.reset = this.reset.bind(this);\n    this.manipulateChange= this.manipulateChange.bind(this);\n    this.izracunajVrijednost = this.izracunajVrijednost.bind(this);\n  }\n\n  handleChange = (event) => {\n    if(this.state.rezultat && !this.state.znak){\n      this.setState({\n        input: this.state.input + event.target.value,\n        rezultat:''\n      })\n    }\n\n    this.setState({\n      input: this.state.input + event.target.value\n    });\n  }\n\n  manipulateChange = (event) => {\n    this.setState({\n      znak: event.target.value,\n      broj1: this.state.input,\n      input:'',\n    })\n  }\n\n\n  reset = () => {\n    this.setState({\n      input:'',\n      znak:'',\n      broj1:'',\n      rezultat:''\n    });\n  }\n\n  izracunajVrijednost = () => {\n    if(this.state.znak === '-')\n    {\n          if(!this.state.rezultat)\n          {\n            this.setState({\n                rezultat: Number(this.state.broj1) - Number(this.state.input),\n                broj1:'',\n                znak:'',\n                input:''\n\n      });\n      }\n      else {\n        this.setState(state=> ({\n          rezultat: state.rezultat - state.input,\n          broj1:'',\n          znak:'',\n          input:''\n        }));\n      }\n    }\n\n    else if(this.state.znak === 'x')\n    {\n      if(!this.state.rezultat)\n          {\n            this.setState({\n                rezultat: this.state.broj1 * this.state.input,\n                broj1:'',\n                znak:'',\n                input:''\n\n      });\n      }\n      else {\n        this.setState(state=> ({\n          rezultat: state.rezultat * state.input,\n          broj1:'',\n          znak:'',\n          input:''\n        }));\n      }\n    }\n    else if(this.state.znak === '+')\n    {\n      if(!this.state.rezultat)\n          {\n            this.setState({\n                rezultat: Number(this.state.broj1) + Number(this.state.input),\n                broj1:'',\n                znak:'',\n                input:''\n\n      });\n      }\n      else {\n        this.setState(state=> ({\n          rezultat: Number(state.rezultat) + Number(state.input),\n          broj1:'',\n          znak:'',\n          input:''\n        }));\n      }\n    }\n    else if(this.state.znak === '/')\n    {\n      if(!this.state.rezultat)\n          {\n            this.setState({\n                rezultat: this.state.broj1 / this.state.input,\n                broj1:'',\n                znak:'',\n                input:''\n\n      });\n      }\n      else {\n        this.setState(state=> ({\n          rezultat: state.rezultat / state.input,\n          broj1:'',\n          znak:'',\n          input:''\n        }));\n      }\n    }\n\n    \n  }\n\n\n  \n\n    render() {\n\n      return (\n  \n      <div className=\"App\">\n        <h1>Calculator</h1>\n        <div className=\"Calculator-box\">\n          <div className=\"racunanje\">\n            {\n            this.state.rezultat ?\n            this.state.rezultat : this.state.broj1 ?\n            this.state.broj1 : null\n            }\n            </div>\n          \n          <div className=\"display-view\">\n              <div className=\"manipulacijaznak\">{this.state.znak}</div>\n              <div className=\"rezultat\">\n             {\n                  this.state.rezultat ?\n                  this.state.input\n                  :\n                  this.state.input ?\n                  this.state.input :\n                 0\n            \n              }</div>\n            </div>\n            \n          <div className=\"Calculator-buttons\">\n          <button onClick={this.reset} className=\"AC\">AC</button>\n          <button value='/' onClick={e => this.manipulateChange(e)} className=\"manipulate\">/</button>\n          <button value='x' onClick={e => this.manipulateChange(e)} className=\"manipulate\">x</button>\n          <button value='7' onClick={e => this.handleChange(e)} className=\"broj\">7</button>\n          <button value='8' onClick={e => this.handleChange(e)} className=\"broj\">8</button>\n          <button value='9' onClick={e => this.handleChange(e)} className=\"broj\">9</button>\n          <button value='-' onClick={e => this.manipulateChange(e)} className=\"manipulate\">-</button>\n          <button value='4' onClick={e => this.handleChange(e)} className=\"broj\">4</button>\n          <button value='5' onClick={e => this.handleChange(e)} className=\"broj\">5</button>\n          <button value='6' onClick={e => this.handleChange(e)} className=\"broj\">6</button>\n          <button value='+' onClick={e => this.manipulateChange(e)} className=\"manipulate\">+</button>\n          <button value='1' onClick={e => this.handleChange(e)} className=\"broj\">1</button>\n          <button value='2' onClick={e => this.handleChange(e)} className=\"broj\">2</button>\n          <button value='3' onClick={e => this.handleChange(e)} className=\"broj\">3</button>\n          <button onClick ={this.izracunajVrijednost} className=\"equals\">=</button>\n          <button value='0' onClick={e => this.handleChange(e)} className=\"nula\">0</button>\n          <button value='.' onClick={e => this.handleChange(e)} className=\"broj\">.</button>\n\n          </div>\n        </div>\n      </div>\n      );\n    }\n  };\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}